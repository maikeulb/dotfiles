# Whether to check if a hook plugin has changed since Overcommit last ran it.
# This is a defense mechanism when working with repositories which can contain
# untrusted code (e.g. when you fetch a pull request from a third party).
# See https://github.com/brigade/overcommit#security for more information.
verify_signatures: false

  # Hooks that are run against every commit message after a user has written it.
  # These hooks are useful for enforcing policies on commit messages written for a
  # project.

CommitMsg:
  ALL:
    requires_files: false
    quiet: false

  CapitalizedSubject:
    enabled: true
    description: 'Check subject capitalization'

  EmptyMessage:
    enabled: true
    description: 'Check for empty commit message'
    quiet: false

  SingleLineSubject:
    enabled: true
    description: 'Check subject line'

  SpellCheck:
    enabled: true
    description: 'Check for misspelled words'
    required_executable: 'hunspell'
    flags: ['-a']

  TextWidth:
    enabled: true
    description: 'Check text width'
    max_subject_width: 60
    max_body_width: 72

  TrailingPeriod:
    enabled: true
    description: 'Check for trailing periods in subject'

      # Hooks that are run after `git commit` is executed, before the commit message
      # editor is displayed. These hooks are ideal for syntax checkers, linters, and
      # other checks that you want to run before you allow a commit object to be
      # created.
    PreCommit:
      ALL:
        problem_on_unmodified_line: report
    requires_files: true
    required: false
    quiet: false

    AuthorEmail:
      enabled: true
    description: 'Check author email'
    requires_files: false
    required: true
    quiet: false
    pattern: '^[^@]+@.*$'

    AuthorName:
      enabled: true
    description: 'Check for author name'
    requires_files: false
    required: true
    quiet: false

    Mdl:
      enabled: true
    description: 'Analyze with mdl'
    required_executable: 'mdl'
    install_command: 'gem install mdl'
    include: '**/*.md'

    Pep257:
      enabled: true
    description: 'Analyze docstrings with pep257'
    required_executable: 'pep257'
    install_command: 'pip install pep257'
    include: '**/*.py'

    Pep8:
      enabled: true
    description: 'Analyze with pep8'
    required_executable: 'pep8'
    install_command: 'pip install pep8'
    include: '**/*.py'

    Pyflakes:
      enabled: true
    description: 'Analyze with pyflakes'
    required_executable: 'pyflakes'
    install_command: 'pip install pyflakes'
    include: '**/*.py'

    Pylint:
      enabled: true
    description: 'Analyze with Pylint'
    required_executable: 'pylint'
    install_command: 'pip install pylint'
    flags:
      - '--msg-template="{path}:{line}:{C}: {msg} ({symbol})"'
      - '--reports=n'
      - '--persistent=n'
    include: '**/*.py'

    PythonFlake8:
      enabled: true
    description: 'Analyze with flake8'
    required_executable: 'flake8'
    install_command: 'pip install flake8'
    include: '**/*.py'

    ShellCheck:
      enabled: true
    description: 'Analyze with ShellCheck'
    required_executable: 'shellcheck'
    flags: ['--format=gcc']
    include: '**/*.sh'

    TrailingWhitespace:
      enabled: true
    description: 'Check for trailing whitespace'
    required_executable: 'grep'
    flags: ['-IHn', "[ \t]$"]

    Vint:
      enabled: true
    description: 'Analyze with Vint'
    required_executable: 'vint'
    install_command: 'pip install vim-vint'
    include:
      - '**/*.vim'
      - '**/*.vimrc'
      - '**/*init.vim'


    YamlSyntax:
      enabled: true
    description: 'Check YAML syntax'
    required_library: 'yaml'
    include:
      - '**/*.yaml'
      - '**/*.yml'
